import shutil
import re
import argparse
import os
import json
import time
"""
corrige_dados.py

Ferramenta de linha de comando para corrigir e validar arquivos JSON Lines (JSONL).

Aplica as seguintes corre√ß√µes em sequ√™ncia:
1. Detecta e remove a √∫ltima linha se estiver truncada/inv√°lida.
2. Remove v√≠rgulas sobrando antes de ']' e '}'.
3. Corrige aspas de abertura faltantes em valores de string (ex: ": , " -> ": " ").
"""



def escapa_aspas_internas_de_forma_segura(linha):
    def sub_funcao_de_correcao(match):
        parte_chave_e_separador = match.group(1)
        conteudo_valor = match.group(3)
        conteudo_corrigido = conteudo_valor.replace('""', '\\"')
        return f'{parte_chave_e_separador}"{conteudo_corrigido}"'

    # AQUI EST√Å A MUDAN√áA: adicionamos ""| na regex do conte√∫do
    padrao = r'("([^"]+)":\s*)"((?:\\"|""|[^"])*)"'
    
    return re.sub(padrao, sub_funcao_de_correcao, linha)

def corrige_listas_como_string(linha):
    """
    Usa regex para corrigir listas que foram salvas inteiramente como strings.
    Ex: conserta ' ": "[1, 2]" ' para ' ": [1, 2] '
    """
    # O padr√£o encontra:
    # (:\s*)     - Grupo 1: Os dois-pontos e espa√ßos
    # "(\[.*\])" - Grupo 2: Uma string que come√ßa com '[' e termina com ']'
    # A substitui√ß√£o mant√©m o grupo 1 e o conte√∫do da string (grupo 2) sem as aspas.
    linha_corrigida = re.sub(r'(:\s*)"(\[.*\])"', r'\1\2', linha)
    return linha_corrigida

# --- Fun√ß√µes de Corre√ß√£o (Trabalham com uma √∫nica linha) ---
def corrige_listas_iniciadas_como_string(linha):
    """
    Usa regex para corrigir listas cujo primeiro elemento √© uma string
    que cont√©m o colchete de abertura.
    Ex: conserta ' "[12", 13 ' para ' [12, 13 '
    """
    # O padr√£o procura por:
    # \"\[([0-9\.]+)  - Uma aspas, um colchete, e captura um ou mais d√≠gitos/pontos (o n√∫mero).
    # \"             - Seguido por uma aspas de fechamento.
    # A substitui√ß√£o coloca o colchete fora, e mant√©m apenas o n√∫mero capturado.
    try:
        linha_corrigida = re.sub(r'\"\[([0-9\.]+)\"', r'[\1', linha)
        return linha_corrigida
    except Exception:
        return linha
    
def corrige_virgulas(linha):
    """
    Recebe uma string (linha) e remove v√≠rgulas sobrando antes de ']' e '}'
    usando regex, que √© mais robusto que .replace().
    """
    # Esta regra encontra uma v√≠rgula, seguida por espa√ßos (ou n√£o), 
    # seguida por '}' ou ']' e remove a v√≠rgula e os espa√ßos.
    linha_corrigida = re.sub(r',\s*(}|])', r'\1', linha)
    return linha_corrigida

def retira_barras(linha):
    ###Recebe uma strin (linha) e retira barras
    linha_corrigida = linha.replace('\\\\', ' ')
    return linha_corrigida

def corrige_strings_sem_aspas(linha):
    """
    Usa regex para encontrar e corrigir valores de texto que n√£o est√£o entre aspas.
    Exemplo: conserta ' "title": Mansell ' para ' "title": "Mansell" '.
    """
    # O padr√£o procura por:
    # (:\s*)      - Grupo 1: Os dois-pontos e qualquer espa√ßo depois dele.
    # ([^\s"}.][^,}]*) - Grupo 2: O valor em si. Come√ßa com algo que n√£o √© espa√ßo, aspas ou '}',
    #              e continua at√© encontrar uma v√≠rgula ou '}'.
    # N√≥s usamos re.sub para substituir o padr√£o encontrado por:
    # Grupo 1 + aspas + Grupo 2 + aspas
    try:
        linha_corrigida = re.sub(r'(:\s*)([^\s"}.][^,}]+)', r'\1"\2"', linha)
        return linha_corrigida
    except Exception:
        # Se o regex falhar por algum motivo, retorna a linha original para evitar quebrar
        return linha

# --- Fun√ß√µes Principais (Orquestradores) ---

"""
def faz_backup(caminho_entrada, caminho_backup):
    ###Cria uma c√≥pia de seguran√ßa do arquivo de entrada.
    try:
        shutil.copy(caminho_entrada, caminho_backup)
        print(f"‚úÖ Backup do arquivo original criado em: '{caminho_backup}'")
        return True
    except FileNotFoundError:
        print(f"‚ùå Erro: O arquivo de entrada '{caminho_entrada}' n√£o foi encontrado.")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao criar o backup: {e}")
        return False
"""
def processa_arquivo(caminho_entrada, caminho_saida):
    
    ###Abre os arquivos, valida a √∫ltima linha, l√™ linha por linha e aplica todas as corre√ß√µes.
    
    print("INFO: Lendo e validando o arquivo de entrada...")
    try:
        with open(caminho_entrada, 'r', encoding='utf-8') as f:
            linhas = f.readlines()
    except Exception as e:
        print(f"‚ùå Erro ao ler o arquivo '{caminho_entrada}': {e}")
        return

    if not linhas:
        print("AVISO: Arquivo de entrada est√° vazio. Nada a fazer.")
        # Cria um arquivo de sa√≠da vazio para consist√™ncia
        open(caminho_saida, 'w').close()
        return
    
    # Verifica se a √∫ltima linha √© um JSON v√°lido
    ultima_linha = linhas[-1].strip()
    if ultima_linha: # S√≥ verifica se a linha n√£o estiver em branco
        try:
            json.loads(ultima_linha)
        except json.JSONDecodeError:
            print(f"AVISO: A √∫ltima linha (N¬∫ {len(linhas)}) parece estar truncada ou inv√°lida. Ela ser√° removida do processamento.")
            linhas.pop() # Remove a √∫ltima linha da lista

    # --- ETAPA DE CORRE√á√ÉO E ESCRITA ---
    print(f"‚öôÔ∏è  Processando {len(linhas)} linhas v√°lidas...")
    correcoes_feitas = 0
    
    with open(caminho_saida, 'w', encoding='utf-8') as arquivo_saida:
        for num, linha_original in enumerate(linhas, 1):
            linha_processada = linha_original
            
            # --- Dentro da fun√ß√£o processa_arquivo ---

            # ETAPA 1: Corre√ß√µes estruturais de "larga escala".
            linha_processada = corrige_listas_como_string(linha_processada) # NOVO!
            linha_processada = corrige_listas_iniciadas_como_string(linha_processada)
            linha_processada = corrige_strings_sem_aspas(linha_processada)

            # ETAPA 2: Corre√ß√µes de conte√∫do e sintaxe fina.
            linha_processada = escapa_aspas_internas_de_forma_segura(linha_processada) # ATUALIZADO!
            linha_processada = corrige_virgulas(linha_processada) # Use a vers√£o com regex!

            # ETAPA 3: Transforma√ß√µes finais de conte√∫do.
            linha_processada = retira_barras(linha_processada)
                
            if linha_original != linha_processada:
                correcoes_feitas += 1

            try: 
                json.loads(linha_processada)
                arquivo_saida.write(linha_processada)
            except json.JSONDecodeError:
                print(f"erro na linha de numero {num}")
                print(linha_processada)

                time.sleep(600)
                continue

            
    print("üëç Processamento conclu√≠do!")
    print(f"   - {len(linhas)} linhas processadas.")
    print(f"   - {correcoes_feitas} linha(s) tiveram corre√ß√µes aplicadas.")
    print(f"‚úÖ Arquivo final salvo em: '{caminho_saida}'")


# --- Ponto de Entrada do Script (Lida com a Interface de Comando) ---

if __name__ == "__main__":
    exemplo_uso = """
Exemplo de uso:
  python corrige_dados.py meu_arquivo.json -o meu_arquivo_1.json
"""
    parser = argparse.ArgumentParser(
        description="Corrige e valida erros de formata√ß√£o em arquivos JSON Lines.",
        epilog=exemplo_uso,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument("arquivo_entrada", help="Caminho para o arquivo de entrada a ser corrigido.")
    parser.add_argument("-o", "--output", help="(Opcional) Caminho para o arquivo de sa√≠da. Se n√£o for fornecido, ser√° criado com o sufixo '_1'.")
    args = parser.parse_args()

    arquivo_entrada = args.arquivo_entrada
    if args.output:
        arquivo_saida = args.output
    else:
        nome_base, extensao = os.path.splitext(arquivo_entrada)
        arquivo_saida = f"{nome_base}_1{extensao}"
    
    #arquivo_backup = f"{arquivo_entrada}.bak"

    #if faz_backup(arquivo_entrada, arquivo_backup):
    processa_arquivo(arquivo_entrada, arquivo_saida)